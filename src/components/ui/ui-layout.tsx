'use client'

import Link from 'next/link'
import {usePathname} from 'next/navigation'
import * as React from 'react'
import {ReactNode, Suspense, useEffect, useRef} from 'react'
import toast, {Toaster} from 'react-hot-toast'

import {AccountChecker} from '../account/account-ui'
import {ClusterChecker, ClusterUiSelect, ExplorerLink} from '../cluster/cluster-ui'
import {WalletButton} from '../solana/solana-provider'

import mainTitle from '../../assets/mainTitle.png'
import { useButtonStore } from '../../store/buttonStore'
import { useUserStore } from '../../store/userStore'
import { useQuery } from '@tanstack/react-query'
import { useAccountStore } from '../../store/accountStore'

export function UiLayout({ children, links }: { children: ReactNode; links: { label: string; path: string }[] }) {
  const pathname = usePathname()

  return (
    <div className=" flex h-screen flex-col z-10">
      <div 
        className="
          navbar py-5  flex-col md:flex-row space-y-2 md:space-y-0 justify-around
          h-[20vh]
      ">
        {scoreBoard()}
        <div className="flex justify-center items-center">
          <img src={mainTitle.src} alt="mainTitle" className="h-12 object-fit mx-auto" />
        </div>
        <div className="flex-none space-x-2 w-1/4 justify-end">
          <WalletButton />
          <ClusterUiSelect />
        </div>
      </div>
      <ClusterChecker>
        <AccountChecker />
      </ClusterChecker>
      <div className="flex w-full h-[80vh] mx-4 lg:mx-auto">
        <Suspense
          fallback={
            <div className="text-center my-32">
              <span className="loading loading-spinner loading-lg"></span>
            </div>
          }
        >
          {children}
        </Suspense>
        <Toaster position="bottom-right" />
      </div>
      {/* <footer className="footer footer-center p-4 bg-base-300 text-base-content">
        <aside>
          <p>
            Generated by{' '}
            <a
              className="link hover:text-white"
              href="https://github.com/solana-developers/create-solana-dapp"
              target="_blank"
              rel="noopener noreferrer"
            >
              create-solana-dapp
            </a>
          </p>
        </aside>
      </footer> */}
    </div>
  )
}

export function AppModal({
  children,
  title,
  hide,
  show,
  submit,
  submitDisabled,
  submitLabel,
}: {
  children: ReactNode
  title: string
  hide: () => void
  show: boolean
  submit?: () => void
  submitDisabled?: boolean
  submitLabel?: string
}) {
  const dialogRef = useRef<HTMLDialogElement | null>(null)

  useEffect(() => {
    if (!dialogRef.current) return
    if (show) {
      dialogRef.current.showModal()
    } else {
      dialogRef.current.close()
    }
  }, [show, dialogRef])

  return (
    <dialog className="modal" ref={dialogRef}>
      <div className="modal-box space-y-5">
        <h3 className="font-bold text-lg">{title}</h3>
        {children}
        <div className="modal-action">
          <div className="join space-x-2">
            {submit ? (
              <button className="btn btn-xs lg:btn-md btn-primary" onClick={submit} disabled={submitDisabled}>
                {submitLabel || 'Save'}
              </button>
            ) : null}
            <button onClick={hide} className="btn">
              Close
            </button>
          </div>
        </div>
      </div>
    </dialog>
  )
}

export function AppHero({
  children,
  title,
  subtitle,
}: {
  children?: ReactNode
  title: ReactNode
  subtitle: ReactNode
}) {
  return (
    <div className="hero py-[30px]">
      <div className="hero-content text-center">
        <div className="max-w-2xl">
          {typeof title === 'string' ? <h1 className="text-5xl font-bold">{title}</h1> : title}
          {typeof subtitle === 'string' ? <p className="py-6">{subtitle}</p> : subtitle}
          {children}
        </div>
      </div>
    </div>
  )
}

export function ellipsify(str = '', len = 4) {
  if (str.length > 30) {
    return str.substring(0, len) + '..' + str.substring(str.length - len, str.length)
  }
  return str
}

export function useTransactionToast() {
  return (signature: string) => {
    toast.success(
      <div className={'text-center'}>
        <div className="text-lg">Transaction sent</div>
        <ExplorerLink path={`tx/${signature}`} label={'View Transaction'} className="btn btn-xs btn-primary" />
      </div>,
    )
  }
}

const scoreBoard = () => {
  const { credit } = useUserStore()
    
  return (
    <div className="w-1/4">
    <div className="flex-none w-full bg-black text-white border-4 border-white">
      <div className="flex flex-col w-full items-center gap-2 text-2xl py-2 px-4">
        <div className="flex flex-row w-full justify-between gap-2">
          <p>CREDIT</p>
          <p>{credit}</p>
        </div>
        {/* <div className="flex flex-row w-full justify-between gap-2 mb-2">
          <p>BUTTON</p>
          <div className="dropdown dropdown-end">
            <label tabIndex={0} className="btn btn-sm m-1">{buttonType}</label>
            <ul tabIndex={0} className="text-black dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
              <li><a onClick={() => setButtonType('BRONZE')}>BRONZE</a></li>
              <li><a onClick={() => setButtonType('SILVER')}>SILVER</a></li>
              <li><a onClick={() => setButtonType('GOLD')}>GOLD</a></li>
            </ul>
          </div>
        </div> */}
      </div>
    </div>
    </div>
  )
}